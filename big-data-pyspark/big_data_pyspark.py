# -*- coding: utf-8 -*-
"""big-data-pyspark.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12_shzIDfXZ3K220MdL8hKMI5qalbcThm
"""

import pyspark
from pyspark.sql import SparkSession
from pyspark.sql import functions as F
from pyspark.sql.functions import col, regexp_replace
from pyspark.sql.types import IntegerType

spark = SparkSession.builder.getOrCreate()

spark.sql("SELECT 'spark' as hello ").show()

data = spark.read.csv('LoansDataset.csv', header=True, inferSchema=True)
data

data.columns

data.show()

loan_counts = data.groupBy("Loan ID").count()
duplicate_loans = loan_counts.filter("count > 1")

duplicate_loans.show()

"""# Remove Duplicates"""

# Remove duplicates based on the ID Loan
data = data.dropDuplicates(["Loan ID"])

# loan_counts = data.groupBy("Loan ID").count()
# duplicate_loans = loan_counts.filter("count > 1")
# duplicate_loans.show()

"""# Fix bad values"""

# Credit Score
CreditScore_to_fix = data.where(col('Credit Score') > 999)
CreditScore_to_fix.show()

data = data.withColumn("Credit Score", F.when(col("Credit Score") >= 1000, regexp_replace(col("Credit Score"), r"0$", ""))
                                 .otherwise(col("Credit Score")))
data.show()

# # Credit Score
# CreditScore_to_fix = data.where(col('Credit Score') > 999)
# CreditScore_to_fix.show()

# Home Ownership
data.select("Home Ownership").distinct().collect()

data = data.withColumn("Home Ownership", F.when(col("Home Ownership") == "HaveMortgage", "Home Mortgage")
                                          .otherwise(col("Home Ownership")))

#Show distinct values to verify changes
data.select("Home Ownership").distinct().show()

data.select("Purpose").distinct().show()

data = data.withColumn("Purpose", F.when(col("Purpose") == "Other", "other")
                                          .otherwise(col("Purpose")))

#Show distinct values to verify changes
data.select("Purpose").distinct().show()

data.select("Loan Status").distinct().show()

data.select("Term").distinct().show()

data = data.withColumn("Current Loan Amount", F.when(col("Current Loan Amount") == 99999999, None).otherwise(col("Current Loan Amount")))
data.show()

# Drop rows where "Years in current job" is "n/a"
data = data.filter(data["Years in current job"] != "n/a")

data.select("Years in current job").distinct().show()

data.select("Bankruptcies").distinct().show()

data.groupBy("Bankruptcies").count().show()

data.filter(data["Bankruptcies"] == "NA").show()

data.select("Bankruptcies").distinct().show()

data = data.withColumn("Bankruptcies", F.when(col("Bankruptcies") == 'NA', 0).otherwise(col("Bankruptcies")))
data.select("Bankruptcies").distinct().show()

data.select("Tax Liens").distinct().show()

data.groupBy("Tax Liens").count().show()

data = data.withColumn("Tax Liens", F.when(col("Tax Liens") == 'NA', 0).otherwise(col("Tax Liens")))
data.select("Tax Liens").distinct().show()

data.toPandas().info()

# Check for nulls in each column
for col_name in data.columns:
  null_count = data.filter(col(col_name).isNull()).count()
  if null_count > 0:
    print(f"Column '{col_name}' has {null_count} null values.")

"""# Impute"""

medians = data.select(F.median("Current Loan Amount"), F.median("Credit Score"), F.median("Annual Income")).collect()[0]

print(medians)

medians[0]

# Fill null values with the medians
data = data.na.fill(medians[0], subset=["Current Loan Amount"])

data = data.fillna(medians[1], subset=["Credit Score"])
data = data.fillna(medians[2], subset=["Annual Income"])

data.select("Annual Income").distinct().show()

"""# Add Credit utilization as a feature

To calculate your credit utilization ratio, you need to tally up all of your credit accounts. First, add up all the outstanding balances, then add up the credit limits. Take the total balances, divide them by the total credit limit, and then multiply by 100 to find your credit utilization ratio as a percentage amount.
"""

data.show()

# create a new columns
data = data.withColumn("Credit utilization",  col("Current Credit Balance") / col("Maximum Open Credit"))
data.show()

data = data.withColumn("Credit Percentage of Annual Income", (col("Current Credit Balance") / col("Annual Income")) * 100)
data.show()

"""# Ensure proper data types"""

data.printSchema()

# Convert "Credit Score" column to integer type
data = data.withColumn("Credit Score", col("Credit Score").cast(IntegerType()))

data = data.withColumn("Monthly Debt", col("Monthly Debt").cast("float"))

data = data.withColumn("Years of Credit History", col("Years of Credit History").cast("float"))

data = data.withColumn("Months since last delinquent", col("Months since last delinquent").cast(IntegerType()))

data = data.withColumn("Maximum Open Credit", col("Maximum Open Credit").cast(IntegerType()))

data = data.withColumn("Bankruptcies", col("Bankruptcies").cast(IntegerType()))

data = data.withColumn("Tax Liens", col("Tax Liens").cast(IntegerType()))

data = data.withColumn("Credit utilization", col("Credit utilization").cast("float"))

data = data.withColumn("Credit Percentage of Annual Income", col("Credit Percentage of Annual Income").cast("float"))

data.printSchema()