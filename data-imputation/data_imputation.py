# -*- coding: utf-8 -*-
"""data-imputation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1seyy12YqMJtykBZa2EWgpi01FcgbkMl1
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# Why is it important to handle null values in datasets?:

- Accurate Analysis: Null values can make false analyses, leading to incorrect conclusions.  
- Many statistical methods cannot handle missing data directly.  Ignoring them can lead to biased estimations and flawed insights.
- Machine learning models cannot process null values.  
"""

df = pd.read_csv('titanic.csv')
df

df.info()

df.Age.isna().sum()

df[['Age']].boxplot() # Age has outliers it is right skewed

(df.isna().sum()/len(df))*100 # we can drop Embarked

df.describe()

"""# Impute the missing values in "Age" using the median age of all passengers and store the result in a column called "Age_med"."""

df_impute = df.copy()

df_impute['Age_med'] = df_impute['Age'].fillna(df_impute['Age'].median())

df_impute.Age_med.isna().sum()

df_impute

"""# Impute the missing values in "Age" using the mean age of passengers of the same sex and store the result in a column called "Age_mean_sex"."""

df_impute = df.copy() #reset

df.groupby('Sex')[['Age']].mean()

df_impute['Age_mean_sex'] = df_impute.groupby('Sex', group_keys= False)[['Age']].apply(lambda x: x.fillna(x.mean()))

df_impute.Age_mean_sex.isna().sum()

"""# Impute the missing values in "Cabin" using a method of your choosing and store it in the original "Cabin" column."""

df_impute = df.copy() #reset

df.Cabin.nunique() # don't use mode for imputation as Cabin has a large amount of different values.

df.Cabin.isna().sum()

df_impute['Cabin'] = df_impute['Cabin'].apply(lambda x : df_impute.Cabin.sample().values[0] if x!= x else x)

df_impute.Cabin.sample().values[0]

df_impute.Cabin.isna().sum()

df_impute['Cabin'].fillna('Missing', inplace=True)

df_impute.Cabin.isna().sum()

"""# GroupBy Mehtod"""

df_impute

df_impute.Pclass.unique()

df_impute.Pclass.isna().sum() # I can group by Pclass having only 3 unique values & no nulls

"""Imputation Strategy

- For each pclass, find the most common cabin.
- Replace missing cabin values with the most common cabin in that class.
- If no cabins are assigned in a class, label as 'Missing'.
"""

df_impute = df.copy()  # reset

df_impute['Cabin'] = df_impute.groupby('Pclass', group_keys = False)['Cabin'].apply(lambda x: x.fillna(x.mode()[0]))

df_impute.Cabin.isna().sum()

