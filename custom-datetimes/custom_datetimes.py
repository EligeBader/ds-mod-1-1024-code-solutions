# -*- coding: utf-8 -*-
"""custom-datetimes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17KUcC6M-ycvUaNCnb6wEKJU_vX0a0X3I

# Parse these custom datetime formats:
- 03/23/21
- 23/03/2021
- March 23rd, 2021 13:01 US/Pacific
- 1:01pm 23rd March, 2021 Europe/London
- 1616482800
- 2021-03-23T12:00:53.034-07:00
"""

import datetime as dt
import pytz
import re

"""# Parse: 03/23/21"""

dt.datetime.strptime("03/23/21", "%m/%d/%y")

"""#Parse: 23/03/2021"""

dt.datetime.strptime("23/03/2021", "%d/%m/%Y")

"""# Parse: March 23rd, 2021 13:01 US/Pacific"""

date_string = 'March 23rd, 2021 13:01 US/Pacific'

# Define timezone mapping
tz = re.findall("\w+\/\w+", date_string)[0]
tz = pytz.timezone(tz)

# Remove ordinal suffix
date_string = re.sub(r'(.+)(st|nd|rd|th)(.+)(\s+.+)', r"\1\3", date_string)

# Parse date
dt.datetime.strptime(date_string, '%B %d, %Y %H:%M').astimezone(tz)

"""# Parse: 1:01pm 23rd March, 2021 Europe/London

## Not recommended
"""

S4 = "1:01pm 23rd March, 2021 Europe/London"
london = pytz.timezone("Europe/London")
dt.datetime.strptime(S4, "%I:%M%p %drd %B, %Y Europe/London").astimezone(london)

"""## Recommended"""

S4 = "1:01pm 23rd March, 2021 Europe/London"

tz = re.findall("\w+\/\w+", S4)[0]
tz = pytz.timezone(tz)

S4_sub = re.sub(r"(.+)(st|nd|rd|th)(.+,\s+\d+)(\s+.+)", r"\1\3", S4)
 # (.+) match the 1st group: 1:01pm 23 and the 2nd (.+) match everything after rd, \s for white space matching the format of March,(Space) \d for digits (2021), \1\3 means part 1 and 3.

dt.datetime.strptime(S4_sub, "%I:%M%p %d %B, %Y").astimezone(tz)

"""#Parse: 1616482800"""

Parse5 = 1616482800
dt.datetime.fromtimestamp(Parse5)

"""# Parse: 2021-03-23T12:00:53.034-07:00"""

Parse6 = "2021-03-23T12:00:53.034-07:00"
dt.datetime.strptime(Parse6 , "%Y-%m-%dT%H:%M:%S.%f%z")